#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pygtk
import gtk, gobject, glib
import threading

from scripts.accuracy_calculator import calculate_accuracy
from scripts.corpus_pre_processor import pre_process_corpus
from scripts.corpus_splitter import split_corpus
from scripts.ferret_executer import execute_ferret
from scripts.result_generator import generate_result
from scripts.settings_helper import *

import os
import time

pygtk.require("2.0")

gobject.threads_init()


class PreProcessGTK:

	__verbosity = 'silent'
	__force_overwrite = True

	def __init__(self):
		self.gladefile = "pre_process_gtk2.glade"
		self.glade = gtk.Builder()
		self.glade.add_from_file(self.gladefile)
		self.glade.connect_signals(self)

		self.main_window = self.glade.get_object("mainWindow")
		self.process_settings_window = self.glade.get_object("processSettingsWindow")
		self.chooser_window = self.glade.get_object("chooserWindow")
		self.progress_bar_window = self.glade.get_object("progressBarWindow")

		self.main_window.show_all()

	# mainWindow========================================================================================================

	def on_btnSplitCorpus_click_event(self, event):
		self.progress_bar_window.show_all()
		progress_bar = self.glade.get_object("progressBar")

		thread = threading.Thread(
			target=self.splitter,
			args=(progress_bar,)
		)
		thread.start()

	def splitter(self, progress_bar):
		split_corpus(self.__verbosity)
		execute_ferret('splitted_files', self.__force_overwrite, self.__verbosity, progress_bar)

		self.progress_bar_window.hide()

		return True

	def on_btnProcessCorpusDialog_click_event(self, event):
		self.process_settings_window.show_all()

	def on_btnCalculateAccuracyDialog_click_event(self, event):
		self.chooser_window.show_all()

	def on_mainWindow_delete_event(self, widget, event):
		gtk.main_quit()

	# processSettingsWindow=============================================================================================

	def on_btnProcessCorpus_click_event(self, event):
		self.progress_bar_window.show_all()

		permitted_tags = []
		if self.glade.get_object("chkPermitNoun").get_active():
			permitted_tags.append("NOUN")
		if self.glade.get_object("chkPermitVerb").get_active():
			permitted_tags.append("VERB")
		if self.glade.get_object("chkPermitAdv").get_active():
			permitted_tags.append("ADV")
		if self.glade.get_object("chkPermitAdj").get_active():
			permitted_tags.append("ADJ")
		if self.glade.get_object("chkPermitAdp").get_active():
			permitted_tags.append("ADP")
		if self.glade.get_object("chkPermitConj").get_active():
			permitted_tags.append("CONJ")

		settings = {
			"remove_stop_words": self.glade.get_object("chkRemoveStopWords").get_active(),
			"permitted_tags": permitted_tags,
			"perform_ordering": self.glade.get_object("chkPerformOrdering").get_active(),
			"use_word_sense": self.glade.get_object("chkUseWordSense").get_active(),
			"similarity_measure": self.glade.get_object("cmbSimilarityMeasure").get_active_text(),
			"similarity_threshold": float(self.glade.get_object("txtSimilarityThreshold").get_text()),
			"type_of_replacement": self.glade.get_object("cmbTypeOfReplacement").get_active_text(),
		}

		progress_bar = self.glade.get_object("progressBar")
		thread = threading.Thread(
			target=self.parser,
			args=(progress_bar, settings)
		)
		thread.start()

	def parser(self, progress_bar, settings):
		target_directory = settings_to_directory(settings)
		pre_process_corpus(settings, 'splitted_parsed_files/' + target_directory, self.__force_overwrite, self.__verbosity, progress_bar)
		execute_ferret('splitted_parsed_files/' + target_directory, self.__force_overwrite, self.__verbosity, progress_bar)

		self.progress_bar_window.hide()

		return True

	def on_processSettingsWindow_delete_event(self, widget, event):
		self.process_settings_window.hide()
		return True

	# chooserWindow=====================================================================================================

	def on_btnCalculateAccuracy_click_event(self, event):
		parent = None
		md = gtk.MessageDialog(
			parent,
			gtk.DIALOG_DESTROY_WITH_PARENT,
			gtk.MESSAGE_INFO,
			gtk.BUTTONS_CLOSE,
			"Calculate accuracy"
		)
		md.run()

		# TODO calculate settings this from the selected row
		# target_directory = settings_to_directory(settings)
		# generate_result(target_directory, threshold)
		# calculate_accuracy(target_directory)

	def on_chooserWindow_delete_event(self, widget, event):
		self.chooser_window.hide()
		return True


if __name__ == "__main__":
	try:
		a = PreProcessGTK()
		gtk.main()
	except KeyboardInterrupt:
		pass
